name: Build and Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.4'

    - name: Install Templ
      run: go install github.com/a-h/templ/cmd/templ@latest

    - name: Download Tailwind CSS standalone binary
      run: |
        curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64
        chmod +x tailwindcss-linux-x64
        mv tailwindcss-linux-x64 /usr/local/bin/tailwindcss
    
    - name: Verify Tailwind installation
      run: tailwindcss --help
    
    - name: Generate templ files
      run: templ generate
    
    - name: Build production CSS
      run: |
        tailwindcss -i ./input.css -o ./static/styles.css --minify
    
    - name: Build Go binary
      run: |
        go build -v -o app -ldflags="-s -w" .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: |
          app
          static/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download artifact from Build
      uses: actions/download-artifact@v4
      with:
        name: production-build

    - name: Connect to Cloudflare WARP
      uses: oHTGo/setup-cloudflare-warp-action@master
      with:
        organization: drabart
        auth-client-id: ${{ secrets.AUTH_CLIENT_ID }}
        auth-client-secret: ${{ secrets.AUTH_CLIENT_SECRET }}

    - name: Verify WARP connection
      run: |
        warp-cli --accept-tos status
        warp-cli status

    - name: Deploy to home server via SSH
      env:
        # SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
        REMOTE_HOST: 192.168.50.20
        REMOTE_USER: drabart
        REMOTE_PATH: /home/drabart/72h
      run: |
        mkdir -p ~/.ssh
        # echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        # chmod 600 ~/.ssh/id_ed25519
        # ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

        scp production-build.zip $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/production-build.zip

        ssh $REMOTE_USER@$REMOTE_HOST << 'EOF'
          cd /home/drabart/72h
          unzip -o production-build.zip
          # pkill app || true
          # nohup ./app > app.log 2>&1 &
        EOF